WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
Initialized distributed mode...
Start training
self.yaml_cfg: {'task': 'detection', 'num_classes': 80, 'remap_mscoco_category': True, 'train_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': '/media/data/coco/images/train2017', 'ann_file': '/media/data/coco/annotations/instances_train2017.json', 'transforms': {'type': 'Compose', 'ops': [{'type': 'RandomPhotometricDistort', 'p': 0.5}, {'type': 'RandomZoomOut', 'fill': 0}, {'type': 'RandomIoUCrop', 'p': 0.8}, {'type': 'SanitizeBoundingBox', 'min_size': 1}, {'type': 'RandomHorizontalFlip'}, {'type': 'Resize', 'size': [640, 640]}, {'type': 'ToImageTensor'}, {'type': 'ConvertDtype'}, {'type': 'SanitizeBoundingBox', 'min_size': 1}, {'type': 'ConvertBox', 'out_fmt': 'cxcywh', 'normalize': True}]}, 'return_masks': False}, 'shuffle': True, 'batch_size': 4, 'num_workers': 4, 'drop_last': True, 'collate_fn': 'default_collate_fn'}, 'val_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': '/media/data/coco/images/val2017', 'ann_file': '/media/data/coco/annotations/instances_val2017.json', 'transforms': {'type': 'Compose', 'ops': [{'type': 'Resize', 'size': [640, 640]}, {'type': 'ToImageTensor'}, {'type': 'ConvertDtype'}]}}, 'shuffle': False, 'batch_size': 8, 'num_workers': 4, 'drop_last': False, 'collate_fn': 'default_collate_fn'}, 'sync_bn': True, 'find_unused_parameters': True, 'use_amp': False, 'scaler': {'type': 'GradScaler', 'enabled': True}, 'use_ema': True, 'ema': {'type': 'ModelEMA', 'decay': 0.9999, 'warmups': 2000}, 'epoches': 72, 'clip_max_norm': 0.1, 'optimizer': {'type': 'AdamW', 'params': [{'params': 'backbone', 'lr': 1e-05}, {'params': '^(?=.*encoder(?=.*bias|.*norm.*weight)).*$', 'weight_decay': 0.0}, {'params': '^(?=.*decoder(?=.*bias|.*norm.*weight)).*$', 'weight_decay': 0.0}], 'lr': 0.0001, 'betas': [0.9, 0.999], 'weight_decay': 0.0001}, 'lr_scheduler': {'type': 'MultiStepLR', 'milestones': [1000], 'gamma': 0.1}, 'model': 'RTDETR', 'criterion': 'SetCriterion', 'postprocessor': 'RTDETRPostProcessor', 'RTDETR': {'backbone': 'PResNet', 'encoder': 'HybridEncoder', 'decoder': 'RTDETRTransformer', 'multi_scale': [480, 512, 544, 576, 608, 640, 640, 640, 672, 704, 736, 768, 800]}, 'PResNet': {'depth': 50, 'variant': 'd', 'freeze_at': 0, 'return_idx': [1, 2, 3], 'num_stages': 4, 'freeze_norm': True, 'pretrained': True}, 'HybridEncoder': {'in_channels': [512, 1024, 2048], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'use_encoder_idx': [2], 'num_encoder_layers': 1, 'nhead': 8, 'dim_feedforward': 1024, 'dropout': 0.0, 'enc_act': 'gelu', 'pe_temperature': 10000, 'expansion': 1.0, 'depth_mult': 1, 'act': 'silu', 'eval_spatial_size': [640, 640]}, 'RTDETRTransformer': {'feat_channels': [256, 256, 256], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'num_levels': 3, 'num_queries': 300, 'num_decoder_layers': 6, 'num_denoising': 100, 'eval_idx': -1, 'eval_spatial_size': [640, 640]}, 'use_focal_loss': True, 'RTDETRPostProcessor': {'num_top_queries': 300}, 'SetCriterion': {'weight_dict': {'loss_vfl': 1, 'loss_bbox': 5, 'loss_giou': 2}, 'losses': ['vfl', 'boxes'], 'alpha': 0.75, 'gamma': 2.0, 'matcher': {'type': 'HungarianMatcher', 'weight_dict': {'cost_class': 2, 'cost_bbox': 5, 'cost_giou': 2}, 'alpha': 0.25, 'gamma': 2.0}}, '__include__': ['../dataset/coco_detection.yml', '../runtime.yml', './include/dataloader.yml', './include/optimizer.yml', './include/rtdetr_r50vd.yml'], 'output_dir': './output/rtdetr_r50vd_6x_coco', 'resume': None, 'tuning': None}
cfg['_pymodule']: <module 'src.zoo.rtdetr.rtdetr' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/zoo/rtdetr/rtdetr.py'>
name: RTDETR
cls: <class 'src.zoo.rtdetr.rtdetr.RTDETR'>
cfg['_pymodule']: <module 'src.nn.backbone.presnet' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/nn/backbone/presnet.py'>
name: PResNet
cls: <class 'src.nn.backbone.presnet.PResNet'>
Load PResNet50 state_dict
cfg['_pymodule']: <module 'src.zoo.rtdetr.hybrid_encoder' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/zoo/rtdetr/hybrid_encoder.py'>
name: HybridEncoder
cls: <class 'src.zoo.rtdetr.hybrid_encoder.HybridEncoder'>
cfg['_pymodule']: <module 'src.zoo.rtdetr.rtdetr_decoder' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/zoo/rtdetr/rtdetr_decoder.py'>
name: RTDETRTransformer
cls: <class 'src.zoo.rtdetr.rtdetr_decoder.RTDETRTransformer'>
self.model: DistributedDataParallel(
  (module): RTDETR(
    (backbone): PResNet(
      (conv1): Sequential(
        (conv1_1): ConvNormLayer(
          (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (norm): FrozenBatchNorm2d(32, eps=1e-05)
          (act): ReLU(inplace=True)
        )
        (conv1_2): ConvNormLayer(
          (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (norm): FrozenBatchNorm2d(32, eps=1e-05)
          (act): ReLU(inplace=True)
        )
        (conv1_3): ConvNormLayer(
          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (norm): FrozenBatchNorm2d(64, eps=1e-05)
          (act): ReLU(inplace=True)
        )
      )
      (res_layers): ModuleList(
        (0): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): Identity()
              )
              (short): ConvNormLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
            (1-2): 2 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(64, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
        (1): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): Identity()
              )
              (short): Sequential(
                (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (conv): ConvNormLayer(
                  (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): FrozenBatchNorm2d(512, eps=1e-05)
                  (act): Identity()
                )
              )
              (act): ReLU(inplace=True)
            )
            (1-3): 3 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(128, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
        (2): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(1024, eps=1e-05)
                (act): Identity()
              )
              (short): Sequential(
                (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (conv): ConvNormLayer(
                  (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): FrozenBatchNorm2d(1024, eps=1e-05)
                  (act): Identity()
                )
              )
              (act): ReLU(inplace=True)
            )
            (1-5): 5 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(256, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(1024, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
        (3): Blocks(
          (blocks): ModuleList(
            (0): BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(2048, eps=1e-05)
                (act): Identity()
              )
              (short): Sequential(
                (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
                (conv): ConvNormLayer(
                  (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                  (norm): FrozenBatchNorm2d(2048, eps=1e-05)
                  (act): Identity()
                )
              )
              (act): ReLU(inplace=True)
            )
            (1-2): 2 x BottleNeck(
              (branch2a): ConvNormLayer(
                (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2b): ConvNormLayer(
                (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(512, eps=1e-05)
                (act): ReLU(inplace=True)
              )
              (branch2c): ConvNormLayer(
                (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): FrozenBatchNorm2d(2048, eps=1e-05)
                (act): Identity()
              )
              (act): ReLU(inplace=True)
            )
          )
        )
      )
    )
    (decoder): RTDETRTransformer(
      (input_proj): ModuleList(
        (0-2): 3 x Sequential(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (decoder): TransformerDecoder(
        (layers): ModuleList(
          (0-5): 6 x TransformerDecoderLayer(
            (self_attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
            )
            (dropout1): Dropout(p=0.0, inplace=False)
            (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (cross_attn): MSDeformableAttention(
              (sampling_offsets): Linear(in_features=256, out_features=192, bias=True)
              (attention_weights): Linear(in_features=256, out_features=96, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (dropout2): Dropout(p=0.0, inplace=False)
            (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (linear1): Linear(in_features=256, out_features=1024, bias=True)
            (dropout3): Dropout(p=0.0, inplace=False)
            (linear2): Linear(in_features=1024, out_features=256, bias=True)
            (dropout4): Dropout(p=0.0, inplace=False)
            (norm3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (denoising_class_embed): Embedding(81, 256, padding_idx=80)
      (query_pos_head): MLP(
        (layers): ModuleList(
          (0): Linear(in_features=4, out_features=512, bias=True)
          (1): Linear(in_features=512, out_features=256, bias=True)
        )
        (act): ReLU(inplace=True)
      )
      (enc_output): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (enc_score_head): Linear(in_features=256, out_features=80, bias=True)
      (enc_bbox_head): MLP(
        (layers): ModuleList(
          (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
          (2): Linear(in_features=256, out_features=4, bias=True)
        )
        (act): ReLU(inplace=True)
      )
      (dec_score_head): ModuleList(
        (0-5): 6 x Linear(in_features=256, out_features=80, bias=True)
      )
      (dec_bbox_head): ModuleList(
        (0-5): 6 x MLP(
          (layers): ModuleList(
            (0-1): 2 x Linear(in_features=256, out_features=256, bias=True)
            (2): Linear(in_features=256, out_features=4, bias=True)
          )
          (act): ReLU(inplace=True)
        )
      )
    )
    (encoder): HybridEncoder(
      (input_proj): ModuleList(
        (0): Sequential(
          (0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (1): Sequential(
          (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (2): Sequential(
          (0): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (encoder): ModuleList(
        (0): TransformerEncoder(
          (layers): ModuleList(
            (0): TransformerEncoderLayer(
              (self_attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
              )
              (linear1): Linear(in_features=256, out_features=1024, bias=True)
              (dropout): Dropout(p=0.0, inplace=False)
              (linear2): Linear(in_features=1024, out_features=256, bias=True)
              (norm1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (norm2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (dropout1): Dropout(p=0.0, inplace=False)
              (dropout2): Dropout(p=0.0, inplace=False)
              (activation): GELU(approximate='none')
            )
          )
        )
      )
      (lateral_convs): ModuleList(
        (0-1): 2 x ConvNormLayer(
          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU(inplace=True)
        )
      )
      (fpn_blocks): ModuleList(
        (0-1): 2 x CSPRepLayer(
          (conv1): ConvNormLayer(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (conv2): ConvNormLayer(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (bottlenecks): Sequential(
            (0): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (1): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (2): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
          )
          (conv3): Identity()
        )
      )
      (downsample_convs): ModuleList(
        (0-1): 2 x ConvNormLayer(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (act): SiLU(inplace=True)
        )
      )
      (pan_blocks): ModuleList(
        (0-1): 2 x CSPRepLayer(
          (conv1): ConvNormLayer(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (conv2): ConvNormLayer(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (act): SiLU(inplace=True)
          )
          (bottlenecks): Sequential(
            (0): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (1): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
            (2): RepVggBlock(
              (conv1): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (conv2): ConvNormLayer(
                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                (act): Identity()
              )
              (act): SiLU(inplace=True)
            )
          )
          (conv3): Identity()
        )
      )
    )
  )
)
cfg['_pymodule']: <module 'src.zoo.rtdetr.rtdetr_criterion' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/zoo/rtdetr/rtdetr_criterion.py'>
name: SetCriterion
cls: <class 'src.zoo.rtdetr.rtdetr_criterion.SetCriterion'>
cfg['_pymodule']: <module 'src.zoo.rtdetr.matcher' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/zoo/rtdetr/matcher.py'>
name: HungarianMatcher
cls: <class 'src.zoo.rtdetr.matcher.HungarianMatcher'>
cfg['_pymodule']: <module 'src.zoo.rtdetr.rtdetr_postprocessor' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/zoo/rtdetr/rtdetr_postprocessor.py'>
name: RTDETRPostProcessor
cls: <class 'src.zoo.rtdetr.rtdetr_postprocessor.RTDETRPostProcessor'>
self.yaml_cfg: {'task': 'detection', 'num_classes': 80, 'remap_mscoco_category': True, 'train_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': '/media/data/coco/images/train2017', 'ann_file': '/media/data/coco/annotations/instances_train2017.json', 'transforms': {'type': 'Compose', 'ops': [{'type': 'RandomPhotometricDistort', 'p': 0.5}, {'type': 'RandomZoomOut', 'fill': 0}, {'type': 'RandomIoUCrop', 'p': 0.8}, {'type': 'SanitizeBoundingBox', 'min_size': 1}, {'type': 'RandomHorizontalFlip'}, {'type': 'Resize', 'size': [640, 640]}, {'type': 'ToImageTensor'}, {'type': 'ConvertDtype'}, {'type': 'SanitizeBoundingBox', 'min_size': 1}, {'type': 'ConvertBox', 'out_fmt': 'cxcywh', 'normalize': True}]}, 'return_masks': False}, 'shuffle': True, 'batch_size': 4, 'num_workers': 4, 'drop_last': True, 'collate_fn': 'default_collate_fn'}, 'val_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': '/media/data/coco/images/val2017', 'ann_file': '/media/data/coco/annotations/instances_val2017.json', 'transforms': {'type': 'Compose', 'ops': [{'type': 'Resize', 'size': [640, 640]}, {'type': 'ToImageTensor'}, {'type': 'ConvertDtype'}]}}, 'shuffle': False, 'batch_size': 8, 'num_workers': 4, 'drop_last': False, 'collate_fn': 'default_collate_fn'}, 'sync_bn': True, 'find_unused_parameters': True, 'use_amp': False, 'scaler': {'type': 'GradScaler', 'enabled': True}, 'use_ema': True, 'ema': {'type': 'ModelEMA', 'decay': 0.9999, 'warmups': 2000}, 'epoches': 72, 'clip_max_norm': 0.1, 'optimizer': {'type': 'AdamW', 'params': [{'params': 'backbone', 'lr': 1e-05}, {'params': '^(?=.*encoder(?=.*bias|.*norm.*weight)).*$', 'weight_decay': 0.0}, {'params': '^(?=.*decoder(?=.*bias|.*norm.*weight)).*$', 'weight_decay': 0.0}], 'lr': 0.0001, 'betas': [0.9, 0.999], 'weight_decay': 0.0001}, 'lr_scheduler': {'type': 'MultiStepLR', 'milestones': [1000], 'gamma': 0.1}, 'model': 'RTDETR', 'criterion': 'SetCriterion', 'postprocessor': 'RTDETRPostProcessor', 'RTDETR': {'backbone': 'PResNet', 'encoder': 'HybridEncoder', 'decoder': 'RTDETRTransformer', 'multi_scale': [480, 512, 544, 576, 608, 640, 640, 640, 672, 704, 736, 768, 800]}, 'PResNet': {'depth': 50, 'variant': 'd', 'freeze_at': 0, 'return_idx': [1, 2, 3], 'num_stages': 4, 'freeze_norm': True, 'pretrained': True}, 'HybridEncoder': {'in_channels': [512, 1024, 2048], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'use_encoder_idx': [2], 'num_encoder_layers': 1, 'nhead': 8, 'dim_feedforward': 1024, 'dropout': 0.0, 'enc_act': 'gelu', 'pe_temperature': 10000, 'expansion': 1.0, 'depth_mult': 1, 'act': 'silu', 'eval_spatial_size': [640, 640]}, 'RTDETRTransformer': {'feat_channels': [256, 256, 256], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'num_levels': 3, 'num_queries': 300, 'num_decoder_layers': 6, 'num_denoising': 100, 'eval_idx': -1, 'eval_spatial_size': [640, 640]}, 'use_focal_loss': True, 'RTDETRPostProcessor': {'num_top_queries': 300}, 'SetCriterion': {'weight_dict': {'loss_vfl': 1, 'loss_bbox': 5, 'loss_giou': 2}, 'losses': ['vfl', 'boxes'], 'alpha': 0.75, 'gamma': 2.0, 'matcher': {'type': 'HungarianMatcher', 'weight_dict': {'cost_class': 2, 'cost_bbox': 5, 'cost_giou': 2}, 'alpha': 0.25, 'gamma': 2.0}}, '__include__': ['../dataset/coco_detection.yml', '../runtime.yml', './include/dataloader.yml', './include/optimizer.yml', './include/rtdetr_r50vd.yml'], 'output_dir': './output/rtdetr_r50vd_6x_coco', 'resume': None, 'tuning': None}
cfg['_pymodule']: <module 'src.optim.ema' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/optim/ema.py'>
name: ModelEMA
cls: <class 'src.optim.ema.ModelEMA'>
self.yaml_cfg: {'task': 'detection', 'num_classes': 80, 'remap_mscoco_category': True, 'train_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': '/media/data/coco/images/train2017', 'ann_file': '/media/data/coco/annotations/instances_train2017.json', 'transforms': {'type': 'Compose', 'ops': [{'type': 'RandomPhotometricDistort', 'p': 0.5}, {'type': 'RandomZoomOut', 'fill': 0}, {'type': 'RandomIoUCrop', 'p': 0.8}, {'type': 'SanitizeBoundingBox', 'min_size': 1}, {'type': 'RandomHorizontalFlip'}, {'type': 'Resize', 'size': [640, 640]}, {'type': 'ToImageTensor'}, {'type': 'ConvertDtype'}, {'type': 'SanitizeBoundingBox', 'min_size': 1}, {'type': 'ConvertBox', 'out_fmt': 'cxcywh', 'normalize': True}]}, 'return_masks': False}, 'shuffle': True, 'batch_size': 4, 'num_workers': 4, 'drop_last': True, 'collate_fn': 'default_collate_fn'}, 'val_dataloader': {'type': 'DataLoader', 'dataset': {'type': 'CocoDetection', 'img_folder': '/media/data/coco/images/val2017', 'ann_file': '/media/data/coco/annotations/instances_val2017.json', 'transforms': {'type': 'Compose', 'ops': [{'type': 'Resize', 'size': [640, 640]}, {'type': 'ToImageTensor'}, {'type': 'ConvertDtype'}]}}, 'shuffle': False, 'batch_size': 8, 'num_workers': 4, 'drop_last': False, 'collate_fn': 'default_collate_fn'}, 'sync_bn': True, 'find_unused_parameters': True, 'use_amp': False, 'scaler': {'type': 'GradScaler', 'enabled': True}, 'use_ema': True, 'ema': {'type': 'ModelEMA', 'decay': 0.9999, 'warmups': 2000}, 'epoches': 72, 'clip_max_norm': 0.1, 'optimizer': {'type': 'AdamW', 'params': [{'params': 'backbone', 'lr': 1e-05}, {'params': '^(?=.*encoder(?=.*bias|.*norm.*weight)).*$', 'weight_decay': 0.0}, {'params': '^(?=.*decoder(?=.*bias|.*norm.*weight)).*$', 'weight_decay': 0.0}], 'lr': 0.0001, 'betas': [0.9, 0.999], 'weight_decay': 0.0001}, 'lr_scheduler': {'type': 'MultiStepLR', 'milestones': [1000], 'gamma': 0.1}, 'model': 'RTDETR', 'criterion': 'SetCriterion', 'postprocessor': 'RTDETRPostProcessor', 'RTDETR': {'backbone': 'PResNet', 'encoder': 'HybridEncoder', 'decoder': 'RTDETRTransformer', 'multi_scale': [480, 512, 544, 576, 608, 640, 640, 640, 672, 704, 736, 768, 800]}, 'PResNet': {'depth': 50, 'variant': 'd', 'freeze_at': 0, 'return_idx': [1, 2, 3], 'num_stages': 4, 'freeze_norm': True, 'pretrained': True}, 'HybridEncoder': {'in_channels': [512, 1024, 2048], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'use_encoder_idx': [2], 'num_encoder_layers': 1, 'nhead': 8, 'dim_feedforward': 1024, 'dropout': 0.0, 'enc_act': 'gelu', 'pe_temperature': 10000, 'expansion': 1.0, 'depth_mult': 1, 'act': 'silu', 'eval_spatial_size': [640, 640]}, 'RTDETRTransformer': {'feat_channels': [256, 256, 256], 'feat_strides': [8, 16, 32], 'hidden_dim': 256, 'num_levels': 3, 'num_queries': 300, 'num_decoder_layers': 6, 'num_denoising': 100, 'eval_idx': -1, 'eval_spatial_size': [640, 640]}, 'use_focal_loss': True, 'RTDETRPostProcessor': {'num_top_queries': 300}, 'SetCriterion': {'weight_dict': {'loss_vfl': 1, 'loss_bbox': 5, 'loss_giou': 2}, 'losses': ['vfl', 'boxes'], 'alpha': 0.75, 'gamma': 2.0, 'matcher': {'type': 'HungarianMatcher', 'weight_dict': {'cost_class': 2, 'cost_bbox': 5, 'cost_giou': 2}, 'alpha': 0.25, 'gamma': 2.0}}, '__include__': ['../dataset/coco_detection.yml', '../runtime.yml', './include/dataloader.yml', './include/optimizer.yml', './include/rtdetr_r50vd.yml'], 'output_dir': './output/rtdetr_r50vd_6x_coco', 'resume': None, 'tuning': None}
cfg['_pymodule']: <module 'torch.optim.adamw' from '/home/hslee/anaconda3/lib/python3.11/site-packages/torch/optim/adamw.py'>
name: AdamW
cls: <class 'torch.optim.adamw.AdamW'>
cfg['_pymodule']: <module 'torch.optim.lr_scheduler' from '/home/hslee/anaconda3/lib/python3.11/site-packages/torch/optim/lr_scheduler.py'>
name: MultiStepLR
cls: <class 'torch.optim.lr_scheduler.MultiStepLR'>
Initial lr:  [1e-05, 0.0001, 0.0001, 0.0001]
cfg['_pymodule']: <module 'src.data.dataloader' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/data/dataloader.py'>
name: DataLoader
cls: <class 'src.data.dataloader.DataLoader'>
cfg['_pymodule']: <module 'src.data.coco.coco_dataset' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/data/coco/coco_dataset.py'>
name: CocoDetection
cls: <class 'src.data.coco.coco_dataset.CocoDetection'>
cfg['_pymodule']: <module 'src.data.transforms' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/data/transforms.py'>
name: Compose
cls: <class 'src.data.transforms.Compose'>
loading annotations into memory...
Done (t=11.39s)
creating index...
index created!
cfg['_pymodule']: <module 'src.data.dataloader' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/data/dataloader.py'>
name: DataLoader
cls: <class 'src.data.dataloader.DataLoader'>
cfg['_pymodule']: <module 'src.data.coco.coco_dataset' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/data/coco/coco_dataset.py'>
name: CocoDetection
cls: <class 'src.data.coco.coco_dataset.CocoDetection'>
cfg['_pymodule']: <module 'src.data.transforms' from '/home/hslee/Desktop/INU_RISE/06_RT-DETR/tools/../src/data/transforms.py'>
name: Compose
cls: <class 'src.data.transforms.Compose'>
loading annotations into memory...
Done (t=0.41s)
creating index...
index created!
number of params: 42862860
[W reducer.cpp:1300] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
[W reducer.cpp:1300] Warning: find_unused_parameters=True was specified in DDP constructor, but did not find any unused parameters in the forward pass. This flag results in an extra traversal of the autograd graph every iteration,  which can adversely affect performance. If your model indeed never has any unused parameters in the forward pass, consider turning this flag off. Note that this warning may be a false positive if your model has flow control causing later iterations to have unused parameters. (function operator())
Epoch: [0]  [    0/14786]  eta: 6:29:18  lr: 0.000010  loss: 42.7249 (42.7249)  loss_bbox: 1.3561 (1.3561)  loss_bbox_aux_0: 1.3746 (1.3746)  loss_bbox_aux_1: 1.3981 (1.3981)  loss_bbox_aux_2: 1.3659 (1.3659)  loss_bbox_aux_3: 1.3564 (1.3564)  loss_bbox_aux_4: 1.3796 (1.3796)  loss_bbox_aux_5: 1.3842 (1.3842)  loss_bbox_dn_0: 0.8447 (0.8447)  loss_bbox_dn_1: 0.8447 (0.8447)  loss_bbox_dn_2: 0.8447 (0.8447)  loss_bbox_dn_3: 0.8447 (0.8447)  loss_bbox_dn_4: 0.8447 (0.8447)  loss_bbox_dn_5: 0.8447 (0.8447)  loss_giou: 1.8128 (1.8128)  loss_giou_aux_0: 1.8515 (1.8515)  loss_giou_aux_1: 1.8343 (1.8343)  loss_giou_aux_2: 1.8393 (1.8393)  loss_giou_aux_3: 1.8243 (1.8243)  loss_giou_aux_4: 1.8313 (1.8313)  loss_giou_aux_5: 1.8727 (1.8727)  loss_giou_dn_0: 1.3654 (1.3654)  loss_giou_dn_1: 1.3654 (1.3654)  loss_giou_dn_2: 1.3654 (1.3654)  loss_giou_dn_3: 1.3654 (1.3654)  loss_giou_dn_4: 1.3654 (1.3654)  loss_giou_dn_5: 1.3654 (1.3654)  loss_vfl: 0.2876 (0.2876)  loss_vfl_aux_0: 0.3044 (0.3044)  loss_vfl_aux_1: 0.2952 (0.2952)  loss_vfl_aux_2: 0.2990 (0.2990)  loss_vfl_aux_3: 0.3092 (0.3092)  loss_vfl_aux_4: 0.2930 (0.2930)  loss_vfl_aux_5: 0.3091 (0.3091)  loss_vfl_dn_0: 0.8070 (0.8070)  loss_vfl_dn_1: 0.7628 (0.7628)  loss_vfl_dn_2: 0.8485 (0.8485)  loss_vfl_dn_3: 0.8250 (0.8250)  loss_vfl_dn_4: 0.8360 (0.8360)  loss_vfl_dn_5: 0.8064 (0.8064)  time: 1.5797  data: 0.4498  max mem: 3011
